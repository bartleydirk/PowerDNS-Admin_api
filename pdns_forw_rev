#!/usr/bin/env python
import os, sys
from pprint import pprint, pformat

from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import create_engine, Column, INTEGER, TIMESTAMP, BIGINT, VARCHAR, ForeignKey, SmallInteger, func, not_
from sqlalchemy.orm import sessionmaker
from datetime import datetime
import re

import ipaddress
from admin_api.clientapi import Clientapi

DOAPI = True
if DOAPI:
    CLIAPI = Clientapi()
re_slotspot = re.compile(r'slot.*\.spotx\.')


Base = declarative_base()
#print(dir(create_engine))
#sys.exit()

#select domains.name, aaa.cnt from domains join (select domain_id, count(*) as cnt from records group by domain_id) aaa on aaa.domain_id = domains.id order by aaa.cnt;

privatelist = []
privatelist.append(ipaddress.ip_network(u'192.168.0.0/16'))
privatelist.append(ipaddress.ip_network(u'172.16.0.0/12'))
privatelist.append(ipaddress.ip_network(u'10.0.0.0/8'))


def intsafe(inval):
    """ turn a value into a integer without epic fail """
    val = inval
    try:
        val = int(val)
    except:
        val = None
    return val


def isprivate(addr):
    retval = False
    addr = ipaddress.ip_address(unicode(addr))
    counter = 0
    for subnet in privatelist:
        if addr in subnet:
            retval = True
            break
    return retval

def addr_to_arpa(addr):
    test = addr.split('.')
    if len(test) == 4:
        return "%s.%s.%s.%s.in-addr.arpa" % (test[3], test[2], test[1], test[0])


class Domains(Base):
    __tablename__ = 'domains'
    id = Column(INTEGER(), primary_key=True, nullable=False)
    name = Column(VARCHAR(length=255))
    master = Column(VARCHAR(length=128))
    last_check = Column(INTEGER())
    type = Column(VARCHAR(length=6))
    notified_serial = Column(INTEGER())
    account = Column(VARCHAR(length=40))

    #def __init__(self):
    #    self.runtime = datetime.now()

    def __repr__(self):
        return '%s %s %s' % (self.id, self.type, self.name)


class Records(Base):
    __tablename__ = 'records'
    id = Column(INTEGER(), primary_key=True, nullable=False)
    domain_id = Column(INTEGER())
    name = Column(VARCHAR(length=255))
    type = Column(VARCHAR(length=10))
    content = Column(VARCHAR(length=64000))
    ttl = Column(INTEGER())
    prio = Column(INTEGER())
    change_date = Column(INTEGER())
    disabled = Column(SmallInteger())
    ordername = Column(VARCHAR(length=255))
    auth = Column(SmallInteger())

    def __repr__(self):
        return '%s %s %s %s' % (self.id, self.type, self.name, self.content)



engine = create_engine('mysql://pdns_user:ie0weeR1_jae3sai@dnstest2/pdns')
Session = sessionmaker(bind=engine)
# create a Session
session = Session()

def content_is_qry(chkdom, content):
    # looking for records that should be cnames
    sqry_fw = session.query(Domains.id)\
                     .filter(Domains.name == chkdom)
    
    qry_ret = session.query(Records)\
                     .filter(Records.type == 'A')\
                     .filter(Records.domain_id == sqry_fw)\
                     .filter(Records.content == content)\
                     .order_by(Records.name)
    return qry_ret

def build_arecdict(chkdom='pop'):
    sqry_fw = session.query(Domains.id)\
                     .filter(Domains.name == chkdom)

    qry = session.query(Records)\
                 .filter(Records.type == 'A')\
                 .filter(Records.domain_id == sqry_fw)
                 #.filter(not_(Records.name.in_(multqry_fw)))

    forward_dct = {}
    reverse_dct = {}
    counter = 0
    for rec in qry:
        if rec.content not in forward_dct:
            forward_dct[rec.content] = [rec.name]
        else:
            forward_dct[rec.content].append(rec.name)
        if rec.name not in reverse_dct:
            reverse_dct[rec.name] = [rec.content]
        else:
            reverse_dct[rec.name].append(rec.content)

    return (forward_dct, reverse_dct)

# print 'Here %s' % ('Woo Hoo')

checkdomain = 'pop'


# looking for records that should be cnames
sqry_fw = session.query(Domains.id)\
                 .filter(Domains.name == checkdomain)

multsqry_rv = session.query(Records.content, func.count().label('cnt'))\
                     .filter(Records.type == 'A')\
                     .filter(Records.domain_id == sqry_fw)\
                     .group_by(Records.content)\
                     .subquery('multsqry_rv')

multqry_rv = session.query(multsqry_rv.c.content)\
                    .filter(multsqry_rv.c.cnt > 1)


sqry_fw = session.query(Domains.id)\
                 .filter(Domains.name == checkdomain)

multsqry_fw = session.query(Records.name, func.count().label('cnt'))\
                     .filter(Records.type == 'A')\
                     .filter(Records.domain_id == sqry_fw)\
                     .group_by(Records.name)\
                     .subquery('multsqry_fw')

multqry_fw = session.query(multsqry_fw.c.name)\
                    .filter(multsqry_fw.c.cnt > 1)


onebutwrong = {}


arec_content, rev_content = build_arecdict()

#pprint(arec_content)
for addr in arec_content:
    namelist = arec_content[addr]

    if len(namelist) > 1:
        print "two A's pointing to same ipaddr %s %s" % (addr, namelist)
        foundat = -1
        usethisname = None
        for (cnter, name_) in enumerate(namelist):
            if re_slotspot.search(name_):
                foundat = cnter
                usethisname = name_
        options = []
        for (cnter, name_) in enumerate(namelist):
            thisbe = ""
            if foundat == cnter:
                thisbe = "< -- -- --"
            print "%s %s %s" % (cnter, name_, thisbe)
            options.append(cnter)
        if foundat >= 0:
            for (cnter, name_) in enumerate(namelist):
                if cnter != foundat:
                    # STEP ONE
                    print "ONE Changing %s to a cname to %s" % (name_, usethisname)
                    if DOAPI:
                        CLIAPI.perform_delete(name=name_, rectype='A')
                        CLIAPI.perform_add(name=name_, content=usethisname, rectype='CNAME')
        else:
            thecommand = None
            while thecommand not in options:
                thecommand = intsafe(raw_input('Pick one '))
            usethisname = namelist[thecommand]
            for (cnter, name_) in enumerate(namelist):
                if cnter != thecommand:
                    # STEP TWO
                    print "TWO Changing %s to a cname to %s" % (name_, usethisname)
                    if DOAPI:
                        CLIAPI.perform_delete(name=name_, rectype='A')
                        CLIAPI.perform_add(name=name_, content=usethisname, rectype='CNAME')

        print ""

####################

# now we have gotten changed to cnames all the appropriate records.

arec_content, rev_content = build_arecdict()
issue_dct = {}
counter = 0
for addr in arec_content:
    arpa = addr_to_arpa(addr)
    name = arec_content[addr][0]
    revqry = session.query(Records)\
                    .filter(Records.name == arpa)\
                    .filter(Records.type == 'PTR')
    revrecs = revqry.all()
    if len(revrecs) == 0:
        if isprivate(addr):
            counter += 1
            print('%s No reverse found %s %s %s' % (counter, name, addr, arpa))
            if DOAPI:
                CLIAPI.fixrev(hostname=name, revname=arpa)
    elif len(revrecs) == 1:
        if revrecs[0].content == name:
            #  Woo Hoo, we be good
            pass
        else:
            issue_dct[arpa] = [name]
            print "will fix reverse %s to PTR to %s" % (arpa, name)
            if DOAPI:
                CLIAPI.fixrev(hostname=name, revname=arpa)
            #print('%s 1 but wrong %s %s %s ' % (counter, rec.name, revrecs[0].name, revrecs[0].content))
            #cqry = content_is_qry(rec.content, checkdom=checkdomain)
            #for (cnter, item) in enumerate(cqry):
            #    thisbe = ""
            #    if item.name == revrecs[0].content:
            #        thisbe = "< -- -- --"
            #    print "    %s %s %s " % (cnter, item, thisbe)
            #counter += 1
            #onebutwrong[revrecs[0].name] = rec.name
            #print ""
    else:
        counter += 1
        #print('%s %s %s  ..  "greater than 1"  ..  %s' % (counter, rec, rev, len(revrecs)))


pprint(issue_dct)
sys.exit()

tocname = {}
for addr in arec_content:
    revcontent = arec_content[addr]
    
    qry = session.query(Records)\
                 .filter(Records.type == 'A')\
                 .filter(Records.domain_id == sqry_fw)\
                 .filter(Records.content == addr).all()
    if len(qry) > 1:
        print "fwd and rev not onetoone %s %s" % (addr, revcontent)
        foundat = -1
        usethisname = None
        for (cnter, item) in enumerate(qry):
            if re_slotspot.search(item.name):
                foundat = cnter
                usethisname = item.name
            if foundat == -1 and len(revcontent) == 1 and item.name == revcontent[0]:
                foundat = cnter
                usethisname = item.name
        valid = []
        for (cnter, item) in enumerate(qry):
            thisbe = ""
            if foundat == cnter:
                thisbe = "< -- -- --"
            print "%s %s %s" % (cnter, item, thisbe)
            valid.append(cnter)
        if foundat >= 0:
            for (cnter, item) in enumerate(qry):
                if cnter != foundat:
                    tocname[item.name] = usethisname
                    # STEP ONE
                    #CLIAPI.perform_delete(name=item.name, rectype='A')
                    #CLIAPI.perform_add(name=item.name, content=usethisname, rectype='CNAME')
        else:
            thecommand = None
            while thecommand not in valid:
                thecommand = intsafe(raw_input('Pick one '))
            usethisname = qry[thecommand].name
            for (cnter, item) in enumerate(qry):
                if cnter != thecommand:
                    # STEP TWO
                    print "Changing %s to a cname to %s" % (item.name, usethisname)
                    #CLIAPI.perform_delete(name=item.name, rectype='A')
                    #CLIAPI.perform_add(name=item.name, content=usethisname, rectype='CNAME')

        print ""

# pprint(tocname)

strng = pformat(tocname, indent=4)
op_fv = open('/tmp/tocname', 'w')
op_fv.write(strng)

strng = pformat(onebutwrong, indent=4)
op_fv = open('/tmp/onebutwrong', 'w')
op_fv.write(strng)

strng = pformat(noreverse, indent=4)
op_fv = open('/tmp/noreverse', 'w')
op_fv.write(strng)

