#!/usr/bin/env python

from admin_api import fetch_remote, fetch_json, build_rrset
from pprint import pprint
from admin_api.crypt import Keypair
import base64
import sys
import re
from getpass import getpass


class Clientapi(object):
    """Api Client Class."""

    def __init__(self):
        self.baseurl = 'http://localhost:9393'
        self.username = 'dbartley'
        self.showlog = True

        self.clientkeypair = Keypair(username='mykeys')
        self.pubkey_b64 = base64.b64encode(self.clientkeypair.get_pub_key())

        self.serverkeypair = Keypair(checkexists=True, showlog=True)
        self.log('self.serverkeypair on client exists is %s' % (self.serverkeypair.exists))
        self.token = self.serverkeypair.checktoken()
        self.log('self.serverkeypair token %s' % (self.token))

    def baseheaders(self, pubkey=True):
        """Headers have consistent properties"""
        headers = {}
        headers['X-API-User'] = self.username
        if pubkey:
            headers['X-API-Pubkey'] = self.pubkey_b64
        return headers

    def exchangekeys(self):
        """Exchange Keys with server"""
        headers = self.baseheaders()
        self.log("Clientapi exchangekeys sending headers")

        url = '%s/exchangekeys' % (self.baseurl)
        jdata = fetch_json(url, headers=headers, data=None, method='POST')
        pprint(jdata)

        if 'status' in jdata:
            status = jdata['status']
            self.log('status is %s' % (status))
            if status == 'serverkey':
                # jdata['server_pubkey'] is the base64 version of the public key
                server_pubkey = base64.b64decode(jdata['server_pubkey'])
                # TODO, test to see if I need this next line
                self.serverkeypair = Keypair(pubkeystring=server_pubkey, showlog=True)
                self.serverkeypair.saveserveronclient(pubkey=server_pubkey)

    def gettoken(self, password):
        """Exchange Keys with server"""
        headers = self.baseheaders(pubkey=False)
        self.log("Clientapi gettoken sending headers, pprint follows")
        encryptedpassword = self.serverkeypair.encrypt(password)
        headers['X-API-Password'] = encryptedpassword
        pprint(headers)

        url = '%s/token' % (self.baseurl)
        jdata = fetch_json(url, headers=headers, data=None, method='POST')
        pprint(jdata)

        if 'status' in jdata:
            status = jdata['status']
            self.log('status is %s' % (status))
            if status == 'Password Success':
                encryptedtoken = jdata['encryptedtoken']
                self.log('gettoken -> encryptedtoken is %s' % (encryptedtoken))
                self.clientkeypair.showlog = True
                token = self.clientkeypair.decrypt(encryptedtoken)
                self.log('gettoken -> token is %s' % (token))
                self.serverkeypair.saveserveronclient(token=token)

    def perform_add(self):
        data = []
        data.append(build_rrset(name='fredd.spotx.tv.', ipaddr='192.168.2.92'))

        self.log("sending headers, pprint follows")
        pprint(headers)

        url = '%s/api' % (self.baseurl)
        jdata = fetch_json(url, headers=headers, data=data, method='POST')
        self.log("jdata from server, pprint follows")
        pprint(jdata)

    def log(self, message):
        """Logg, control output here"""
        if self.showlog:
            show = "Clientapi -> %s" % (message)
            print(show)


cliapi = Clientapi()
if not cliapi.serverkeypair.exists:
    print("No serverkeypair, lets exchange them")
    cliapi.exchangekeys()
    print("Exchange done exists is now %s" % (cliapi.serverkeypair.exists))
    print("Now lets get the server to approve of your public key with your password :")
    # password = getpass()
    password = 'asdfqwer'
    cliapi.gettoken(password)
