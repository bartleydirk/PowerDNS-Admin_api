#!/usr/bin/env python
"""This is a class and a script to api to PowerDnsAdmin."""

# pylint: disable=E0401
import base64
from pprint import pprint

from admin_api import fetch_json, build_rrset
from admin_api.crypt import Keypair, limitlines
# import sys

# from getpass import getpass


class Clientapi(object):
    """Api Client Class."""

    def __init__(self):
        self.baseurl = 'http://localhost:9393'
        self.username = 'dbartley'
        self.showlog = True

        self.clientkeypair = Keypair(username='mykeys', showlog=True, isclient=True)
        pubkey, uuid = self.clientkeypair.get_pub_key()
        # self.log('__init__ pub %s uuid %s' % (limitlines(pubkey), uuid))
        self.pubkey_b64 = base64.b64encode(pubkey)
        self.uuid_client_b64 = base64.b64encode(uuid)

        self.serverkeypair = Keypair(checkexists=True, showlog=True, isclient=True)
        self.log('self.serverkeypair on client exists is %s' % (self.serverkeypair.exists))
        self.token = self.serverkeypair.checktoken()
        self.log('self.serverkeypair token %s' % (self.token))

    def baseheaders(self, pubkey=True):
        """Headers have consistent properties"""
        headers = {}
        headers['X-API-User'] = self.username
        if pubkey:
            headers['X-API-Pubkey'] = self.pubkey_b64
            headers['X-API-clientuuid'] = self.uuid_client_b64
        return headers

    def exchangekeys(self):
        """Exchange Keys with server"""
        headers = self.baseheaders()
        self.log("Clientapi exchangekeys sending headers pprint follows")
        pprint(headers)

        url = '%s/exchangekeys' % (self.baseurl)
        jdata = fetch_json(url, headers=headers, data=None, method='POST')
        self.log("Clientapi exchangekeys jdata returned : ")
        pprint(jdata)

        if 'status' in jdata:
            status = jdata['status']
            self.log('status is %s' % (status))
            if status == 'serverkey':
                # jdata['server_pubkey'] is the base64 version of the public key
                server_pubkey = base64.b64decode(jdata['server_pubkey'])
                server_uuid = base64.b64decode(jdata['server_uuid'])
                self.log('exchangekeys server_pubkey is "%s" server_uuid is "%s"' %
                         (limitlines(server_pubkey), server_uuid))
                self.serverkeypair.initafter(server_pubkey, server_uuid)

    def gettoken(self, passwd):
        """Exchange Keys with server"""
        headers = self.baseheaders(pubkey=False)
        self.log("Clientapi gettoken sending headers, pprint follows")
        encryptedpassword = self.serverkeypair.encrypt(passwd)
        headers['X-API-Password'] = encryptedpassword
        pprint(headers)

        url = '%s/token' % (self.baseurl)
        jdata = fetch_json(url, headers=headers, data=None, method='POST')
        pprint(jdata)

        if 'status' in jdata:
            status = jdata['status']
            self.log('status is %s' % (status))
            if status == 'Password Success':
                encryptedtoken = jdata['encryptedtoken']
                self.log('gettoken -> encryptedtoken is %s' % (encryptedtoken))
                self.clientkeypair.showlog = True
                token = self.clientkeypair.decrypt(encryptedtoken)
                self.log('gettoken -> token is %s' % (token))
                self.serverkeypair.saveserveronclient(token=token)

    def perform_add(self):
        """Perform add, this is the whole purpos, the rest is to authenticate the api script"""
        data = []
        data.append(build_rrset(name='fredd.spotx.tv.', ipaddr='192.168.2.92'))
        headers = self.baseheaders(pubkey=False)
        self.log("sending headers, pprint follows")
        pprint(headers)

        url = '%s/api' % (self.baseurl)
        jdata = fetch_json(url, headers=headers, data=data, method='POST')
        self.log("jdata from server, pprint follows")
        pprint(jdata)

    def log(self, message):
        """Logg, control output here"""
        if self.showlog:
            show = "Clientapi -> %s" % (message)
            print(show)


CLIAPI = Clientapi()
if not CLIAPI.serverkeypair.exists:
    print("########## No serverkeypair, lets exchange them ########################")
    CLIAPI.exchangekeys()
    print("########## Exchange done exists is now %s ###############################" % (CLIAPI.serverkeypair.exists))
    print("You a token, the server needs your password : ")
    # password = getpass()
    CLIAPI.gettoken('asdfqwer')
